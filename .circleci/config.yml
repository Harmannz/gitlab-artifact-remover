version: 2
jobs:
  install:
    docker:
      - image: circleci/node:10
    working_directory: ~/gitlab-artifact-remover
    steps:
      - checkout
      - run: npm install
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/gitlab-artifact-remover
  lint:
    docker:
      - image: circleci/node:10
    working_directory: ~/gitlab-artifact-remover
    steps:
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run: npm run lint

  build:
    docker:
      - image: circleci/node:10
    working_directory: ~/gitlab-artifact-remover
    steps:
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - add_ssh_keys:
          fingerprints:
            - "42:7a:91:01:25:41:16:7a:73:9e:8f:b5:77:c2:32:e5"
      - run:
          command: |
            npm run build
            git branch -a
            git config --global user.name "$CIRCLE_USERNAME"
            git checkout -b feature/test/$CIRCLE_BUILD_NUM
            mkdir -p ~/.ssh
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile /dev/null\n" > ~/.ssh/config
            chmod 600 ~/.ssh/config
            ssh-keyscan -Ht rsa github.com >> ~/.ssh/known_hosts
            cat ~/.ssh/known_hosts
            echo $CIRCLE_BRANCH
            git push -u origin feature/test/$CIRCLE_BUILD_NUM --dry-run


  release:
    docker:
      - image: circleci/node:10
    steps:
      - run: echo "hello world"

workflows:
  version: 2
  build:
    jobs:
      - install
      - lint:
          requires:
            - install
      - build:
          requires:
            - install
      - hold-release:
          type: approval
          requires:
            - lint
            - build
          filters:
            branches:
              only:
                - develop
      - release:
          requires:
            - hold-release
          filters:
            branches:
              only:
                - develop

# release: 
# - update release version
# - git commit -m "Release of version $RELEASE_VERSION to master"
# - git tag -a $RELEASE_VERSION -m "tagging release $RELEASE_VERSION"
# - git checkout head of master
# - git merge release/$CI_JOB_ID
# - git checkout head of develop
# - git pull
# - git merge master --no-ff -m "Merge master to develop after $RELEASE_VERSION"

# - set to next snapshot version
# - git add *pom.xml
# - SNAPSHOT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -f sample-project/pom.xml) 
# - git commit -m "New development version $SNAPSHOT_VERSION"
#   # Push after everything above has completed
#   - git push origin develop
#   - git push origin master
#   - git push origin --tags
#   only:
#   - develop
#   when: manual
